// Applies a color to a string using both hexadecimal codes and named colors.
// @description **Description:**
// @description - For hex codes: Converts codes prefixed with `0x` to start with `#`.
// @description - For named colors: Looks up and applies the corresponding hex code from `colorMap`.
// @description - Alpha Handling: Automatically appends `FF` for full opacity if not specified in the color code.
//
// @description **Parameters:**
// @param {string} value
// @description `value: string` The color to apply. Can be a hex code in `#FF4130` or `0xFF4130` format, a named color from `colorMap`, or a hex code with alpha value like `#ff000088`.
//
// @description **Returns:**
// @return {string}
// @description `string` A colored string wrapped in `<color>` tags. If the color code is invalid, it logs an error and returns the original string.
//
// @example print "Hello".color("0xff0000")  // prints "Hello" in red
// @example print "Grey".color("#00FF00")    // prints "Grey" in green
// @example print "Hack".color("blue")       // prints "Hack" in blue 
// @example print "World".color("#ff000088") // prints "World" in red with 88 alpha
// @example print ":)".color("#ffFF0011")    // prints ":)" in yellow with 11 alpha
string.color = function(value)
    if colorMap.hasIndex(value.lower) then value = colorMap[value.lower]
    if value.startsWith("0x") then value = "#" + value[2:]
    if value.startsWith("#") then
        if value.len == 7 then value = value + "ff"
        if value.len == 8 then value = value + value[-1]
        return "<color=" + value + ">" + self + "</color>"
    end if
    logger.error("string.color", "ValueError: Invalid color specification '" + value + "'. Must be a valid hex code or a named color in colorMap. Encountered in string: '" + self + "'.")
    return self
end function